# See https://scalameta.org/scalafmt/docs/configuration.html

style = IntelliJ
version = 2.7.5

# Ignore .scala files not tracked by git (i.e. those in .gitignore):
project.git = true

# TBD: We have some quite long names for types, and more specific naming is better.
#      So increased to 140 for now. We also have other repos on 160, which could be worth considering.
maxColumn = 140

continuationIndent {
    # 2 and 4 are the default values, but putting them here explicitly for reference
    callSite = 2
    defnSite = 4
}


# Sensible for-yield blocks
align {
    arrowEnumeratorGenerator = true
    openParenCallSite = false
    openParenDefnSite = false

    # We do it this way avoid aligning case arrows. Using align.preset=more would ugly alignment
    # of case arrows e.g. when you have case Some(LongName) and case None.
    tokens.add = [
        {code = "<-", owner = "Enumerator.Generator"}
        {code = "->", owner = "Term.ApplyInfix"}
        {code = "=", owner = "(Enumerator.Generator|Param|Assign|Term.Arg.Named|Enumerator.Val|Defn.(Va(l|r)|Def|Type))"}
    ]
}


spaces {
    # Make different uses of the same symbols more obvious/distinct with spacing
    beforeContextBoundColon = always
    afterSymbolicDefs = true
    inByNameTypes = true

    # Just for consistency
    inParentheses = false
}


newlines {
    neverInResultType = true
    alwaysBeforeTopLevelStatements = true
    penalizeSingleSelectMultiArgList = true
    # IMO an entire line just for the } before else is pointless.
    alwaysBeforeElseAfterCurlyIf = false
}


verticalAlignMultilineOperators = false

verticalMultiline {
    atDefnSite = true

    # If 5 or more parameters => always put them on separate lines, even if they would fit the linewidth
    arityThreshold = 5
    newlineAfterOpenParen = true

    # Don't allow dangling parens on same line in class definitions (which it would on default)
    excludeDanglingParens = []

    # Better handling of implicit parameters
    # (I would prefer it on one line if the parameter list is only one implicit parameter, but I don't know if it's possible)
    newlineAfterImplicitKW = true
    newlineBeforeImplicitKW = false
}

# If parentheses open with a newline, then they should also end with a newline
danglingParentheses {
    defnSite = true
    callSite = true
}

# TBD: Trailing commas might be a bit controversial, but one advantage they have is in cases where a class's
#      parameters are changed, the last line does not get a diff just for having a comma added/removed
trailingCommas = multiple

rewrite {
    rules = [
        SortModifiers
        PreferCurlyFors
        SortImports
    ]
}


